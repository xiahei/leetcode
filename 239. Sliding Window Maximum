求滑动窗口中的最大值
解法一：暴力求解
遍历数组并求滑动窗口中的最大值。若数组长度为n，滑动窗口大小为k，则遍历数组所需的时间复杂度为O(n)，在滑动窗口中找最大值的时间复杂度为o(k)最终时间复杂度为o(nk)。
class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        res = []
        if(len(nums)<=0 or k<=0):
            return res
        end = len(nums) - k + 1
        for i in range(end):
            res.append(max(nums[i:i+k]))
        return res
        
解法二：使用队列
时间复杂度为O(n)
class Solution(object):
    def maxSlidingWindow(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        res = []
        #用list模拟队列
        q = []
        if(len(nums)<=0 or k<=0):
            return res
        for i in range(len(nums)):
            if(len(q)>0):
                #如果队头元素不在滑动窗口范围内，则删除队头元素
                if((i - q[0]) >= k):
                    q.pop(0)
                #如果新元素大于队列尾元素，则不断删除队列中元素，直至新元素小于队列中的元素
                while(len(q)>0 and nums[i] > nums[q[-1]]):
                    q.pop()
            #如果队列为空或新元素小于队列尾，则添加元素下标
            q.append(i)
            if((i+1)>=k):
                res.append(nums[q[0]])
        return res
            

