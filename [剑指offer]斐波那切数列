//求斐波那切数列的第n项
方法一：递归
public class Solution {
    public int Fibonacci(int n) {
         if (n<=0){
             return 0;
         }
        if (n==1){
            return 1;
        }
        return Fibonacci(n-1) + Fibonacci(n-2);
    }
}

方法二：时间复杂度O(n)
public class Solution {
    public int Fibonacci(int n) {
         if (n<=0){
             return 0;
         }
        if (n==1){
            return 1;
        }
        int fibNOne = 0;
        int fibNTwo = 1;
        int fibN = 0;
        for(int i=2;i<=n;i++){
            fibN = fibNOne + fibNTwo;
            fibNOne = fibNTwo;
            fibNTwo = fibN;
        }
        return fibN;
    }
}

//青蛙跳台阶
//一个青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个n级的台阶共有多少种跳法。
public class Solution {
    public int JumpFloor(int target) {
    if(target<=0){
        return -1;
    }
    if(target==1){
        return 1;
    }
    if(target==2){
        return 2;
    }
    int jfOne = 1;
    int jfTwo = 2;
    int jfSum = 0;
    for(int i=3;i<=target;i++){
        jfSum = jfOne + jfTwo;
        jfOne = jfTwo;
        jfTwo = jfSum;
    }
    return jfSum;
  }
}

//跳台阶升级版
//一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
public class Solution {
    public int JumpFloorII(int target) {
        if(target<=0){
            return -1;
        }
        else if(target==1){
            return 1;
        }
        else{
            return 2*JumpFloorII(target-1);
        }
    }
}

//我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？
public class Solution {
    public int RectCover(int target) {
        if(target<=0){
            return 0;
        }
        if(target==1){
            return 1;
        }
        if(target==2){
            return 2;
        }
        int sum=0;
        int recOne=1;
        int recTwo=2;
        for(int i=3;i<=target;i++){
            sum = recOne + recTwo;
            recOne = recTwo;
            recTwo = sum;
        }
        return sum;
}
}
